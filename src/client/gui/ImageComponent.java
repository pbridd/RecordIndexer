package client.gui;


import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.io.IOException;
import java.io.Serializable;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;
import javax.swing.JComponent;

import shared.model.Field;
import client.gui.synchronization.BatchState;
import client.gui.synchronization.BatchStateListener;
import client.gui.synchronization.ImageState;
import client.gui.synchronization.ImageStateListener;


public class ImageComponent extends JComponent implements BatchStateListener, Serializable, ImageStateListener{

	
	
	/**
	 * Automatically Generated by Eclipse
	 */
	private static final long serialVersionUID = 4131305282743377675L;
	
	private static BufferedImage NULL_IMAGE = new BufferedImage(10, 10, BufferedImage.TYPE_INT_ARGB);
	
	//private int w_originX;
	//private int w_originY;
	//private double scale;
	
	private boolean dragging;
	private int w_dragStartX;
	private int w_dragStartY;
	private int w_dragStartOriginX;
	private int w_dragStartOriginY;
	
	private String imagePath;
	private BufferedImage image;
	private BufferedImage invertedImage;
	private BufferedImage originalImage;
	
	private DrawingImage dImage;
	private DrawingRect rect;
	
	private List<DrawingShape> shapes;
	
	private BatchState bchS;
	private ImageState imgS;
	

	public ImageComponent(BatchState bchS, ImageState imgS){
		this.bchS = bchS;
		this.imgS = imgS;
		bchS.addListener(this);
		imgS.addListener(this);
		shapes = new ArrayList<DrawingShape>();
		String tempImgPath = bchS.getImagePath();
		if(tempImgPath == null){
			imagePath = "";
		}
		else
			imagePath = tempImgPath;
		if(imgS.getIsNewImgS()){
			imgS.setImagePosX((int) this.getWidth());
			imgS.setImagePosY((int) this.getHeight());
			imgS.setIsNewImgS(false);
		}
		
		initDrag();
		
		this.setBackground(new Color(96, 96, 96));
		
		this.addMouseListener(mouseAdapter);
		this.addMouseMotionListener(mouseAdapter);
		this.addComponentListener(componentAdapter);
		this.addMouseWheelListener(mouseAdapter);
		
		processImages();
		
		remakeShapes();
		
		
	}
	
	//public methods
	/**
	 * Set the scale of the image
	 * @param newScale the new scale to set the image to
	 */
	public void setScale(double newScale){
		//scale = newScale;
		imgS.setZoomLevel(newScale);
		this.repaint();
	}
	
	/**
	 * Set the origin of the image
	 * @param w_newOriginX	The new origin X to set
	 * @param w_newOriginY	The new origin Y to set
	 */
	public void setOrigin(int w_newOriginX, int w_newOriginY){
		imgS.setImagePosX(w_newOriginX);
		imgS.setImagePosY(w_newOriginY);
		//w_originX = w_newOriginX;
		//w_originY = w_newOriginY;
	}
	
	/**
	 * Loads an image from the server
	 * @param imageURL the URL of the image on the server
	 * @return an Image object
	 */
	private BufferedImage loadImage(String imageURL) {
		try {
			URL url = new URL(imageURL);
			return ImageIO.read(url);
		}
		catch (IOException e) {
			return (BufferedImage)NULL_IMAGE;
		}
	}
	
	/**
	 * Initializes the dragging variables to their starting values
	 */
	private void initDrag() {
		dragging = false;
		w_dragStartX = 0;
		w_dragStartY = 0;
		w_dragStartOriginX = 0;
		w_dragStartOriginY = 0;
	}
	
	@Override
	protected void paintComponent(Graphics g){
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D)g;
		drawBackground(g2);
		g2.scale(imgS.getZoomLevel(),  imgS.getZoomLevel());
		g2.translate(-imgS.getImagePosX(), -imgS.getImagePosY());
		
		drawShapes(g2);
		
	}
	
	/**
	 * Draw the background
	 * @param g2
	 */
	private void drawBackground(Graphics2D g2){
		g2.setColor(getBackground());
		g2.fillRect(0, 0, getWidth(), getHeight());
	}
	
	private void drawShapes(Graphics2D g2){
		for(DrawingShape shape : shapes){
			shape.draw(g2);
		}
	}
	
	private void processImages(){
		originalImage = loadImage(imagePath);
		processInvertedImage();
		if(imgS.getImageIsInverted()){
			image = invertedImage;
		}
		else{
			image = originalImage;
		}
	}
	
	private void processInvertedImage(){
		if(originalImage != NULL_IMAGE){
			invertedImage = invertImage(originalImage);
		}
		else{
			invertedImage = NULL_IMAGE;
		}
	}
	
	public void remakeShapes(){
		shapes.clear();
		dImage = new DrawingImage(image, new Rectangle2D.Double(0, 0, image.getWidth(null), image.getHeight(null)));
		shapes.add(dImage);
		if(imgS.getImageIsHighlighted() && rect != null){
			shapes.add(rect);
		}
		this.repaint();
	}
	
	private static BufferedImage invertImage(final BufferedImage src) {
		RescaleOp op = new RescaleOp(-1.0f, 255f, null);
		return op.filter(src, null);
	}
	
	private MouseAdapter mouseAdapter = new MouseAdapter()  {

		@Override
		public void mousePressed(MouseEvent e) {
			int d_X = e.getX();
			int d_Y = e.getY();
			
			AffineTransform transform = new AffineTransform();
			transform.scale(imgS.getZoomLevel(), imgS.getZoomLevel());
			//transform.translate(-w_originX, -w_originY);
			transform.translate(-imgS.getImagePosX(), -imgS.getImagePosY());
			
			Point2D d_Pt = new Point2D.Double(d_X, d_Y);
			Point2D w_Pt = new Point2D.Double();
			try
			{
				transform.inverseTransform(d_Pt, w_Pt);
			}
			catch (NoninvertibleTransformException ex) {
				return;
			}
			int w_X = (int)w_Pt.getX();
			int w_Y = (int)w_Pt.getY();
			
			boolean hitShape = false;
			
			Graphics2D g2 = (Graphics2D)getGraphics();
			for (DrawingShape shape : shapes) {
				if (shape.contains(g2, w_X, w_Y)) {
					hitShape = true;
					break;
				}
			}
			
			if (hitShape) {
				dragging = true;		
				w_dragStartX = w_X;
				w_dragStartY = w_Y;
				/*List<Field> fieldList = bchS.getFields();
				int rowHeight = bchS.getProject().getRecordHeight();
				int firstY = bchS.getProject().getFirstYCoord();
				
				//see if we hit a cell
				for(int i = 0; i < bchS.getProject().getRecordsPerImage(); i++){	
					//check to see if we hit a valid Y coordinate, and if we did, find which cell we're in
					int yMin = (i * rowHeight) + firstY;
					int yMax = ((i+1) * rowHeight) + firstY - 1;
					if(w_Y >= yMin && w_Y <= yMax){
						for(int j = 0; j < fieldList.size(); j++){
							Field workField = fieldList.get(j);
							int xCoord = workField.getXCoord();
							//if we hit both a valid y and x, set the batch state's selected cell!
							if(w_X >= xCoord && w_X < (workField.getWidth() + xCoord)){
								bchS.setSelectedCell(i, j);
							}
						}
					}
				}*/

				w_dragStartOriginX = imgS.getImagePosX();
				w_dragStartOriginY = imgS.getImagePosY();
			}
		}
		

		@Override
		public void mouseDragged(MouseEvent e) {		
			if (dragging) {
				int d_X = e.getX();
				int d_Y = e.getY();
				
				AffineTransform transform = new AffineTransform();
				transform.scale(imgS.getZoomLevel(), imgS.getZoomLevel());
				transform.translate(-w_dragStartOriginX, -w_dragStartOriginY);
				
				Point2D d_Pt = new Point2D.Double(d_X, d_Y);
				Point2D w_Pt = new Point2D.Double();
				try
				{
					transform.inverseTransform(d_Pt, w_Pt);
				}
				catch (NoninvertibleTransformException ex) {
					return;
				}
				int w_X = (int)w_Pt.getX();
				int w_Y = (int)w_Pt.getY();
				
				int w_deltaX = w_X - w_dragStartX;
				int w_deltaY = w_Y - w_dragStartY;
				
				//w_originX = w_dragStartOriginX - w_deltaX;
				//w_originY = w_dragStartOriginY - w_deltaY;
				imgS.setImagePosX(w_dragStartOriginX - w_deltaX);
				imgS.setImagePosY(w_dragStartOriginY - w_deltaY);
				
				repaint();
			}
		}
		
		

		@Override
		public void mouseReleased(MouseEvent e) {
			
			if(w_dragStartOriginX ==imgS.getImagePosX() && w_dragStartOriginY == imgS.getImagePosY()){
				int d_X = e.getX();
				int d_Y = e.getY();
			
				AffineTransform transform = new AffineTransform();
				transform.scale(imgS.getZoomLevel(), imgS.getZoomLevel());
				//transform.translate(-w_originX, -w_originY);
				transform.translate(-imgS.getImagePosX(), -imgS.getImagePosY());
				
				Point2D d_Pt = new Point2D.Double(d_X, d_Y);
				Point2D w_Pt = new Point2D.Double();
				try
				{
					transform.inverseTransform(d_Pt, w_Pt);
				}
				catch (NoninvertibleTransformException ex) {
					return;
				}
				int w_X = (int)w_Pt.getX();
				int w_Y = (int)w_Pt.getY();
				
				boolean hitShape = false;
				
				Graphics2D g2 = (Graphics2D)getGraphics();
				for (DrawingShape shape : shapes) {
					if (shape.contains(g2, w_X, w_Y)) {
						hitShape = true;
						break;
					}
				}
				
				if (hitShape) {
					List<Field> fieldList = bchS.getFields();
					int rowHeight = bchS.getProject().getRecordHeight();
					int firstY = bchS.getProject().getFirstYCoord();
					
					//see if we hit a cell
					for(int i = 0; i < bchS.getProject().getRecordsPerImage(); i++){	
						//check to see if we hit a valid Y coordinate, and if we did, find which cell we're in
						int yMin = (i * rowHeight) + firstY;
						int yMax = ((i+1) * rowHeight) + firstY - 1;
						if(w_Y >= yMin && w_Y <= yMax){
							for(int j = 0; j < fieldList.size(); j++){
								Field workField = fieldList.get(j);
								int xCoord = workField.getXCoord();
								//if we hit both a valid y and x, set the batch state's selected cell!
								if(w_X >= xCoord && w_X < (workField.getWidth() + xCoord)){
									bchS.setSelectedCell(i, j);
								}
							}
						}
					}
				}
			}
			initDrag();
		}

		@Override
		public void mouseWheelMoved(MouseWheelEvent e) {
			double zoom = imgS.getZoomLevel();
			double wheelRot = e.getWheelRotation() *-.1;
			if(imgS.getZoomLevel() + wheelRot > 2.0 || imgS.getZoomLevel() + wheelRot < .4){
				return;
			}
			imgS.setZoomLevel(zoom + wheelRot);
			repaint();
		}	
	};
	
	private ComponentAdapter componentAdapter = new ComponentAdapter() {

		@Override
		public void componentHidden(ComponentEvent e) {
			return;
		}

		@Override
		public void componentMoved(ComponentEvent e) {
			return;
		}

		@Override
		public void componentResized(ComponentEvent e) {
			//updateTextShapes();
		}

		@Override
		public void componentShown(ComponentEvent e) {
			return;
		}
	};

	
	/////////////////
	//DRAWING SHAPE//
	/////////////////
	interface DrawingShape{
		boolean contains(Graphics2D g2, double x, double y);
		void draw(Graphics2D g2);
		Rectangle2D getBounds(Graphics2D g2);
	}
	
	/**
	 * A class to draw the downloaded image
	 * @author pbridd
	 *
	 */
	class DrawingImage implements DrawingShape, Serializable{
		/**
		 * Automatically Generated by Eclipse
		 */
		private static final long serialVersionUID = -997318952857494453L;
		private Image image;
		private Rectangle2D rect;
		
		public DrawingImage(Image image, Rectangle2D rect){
			this.image = image;
			this.rect = rect;
		}
		
		@Override
		public boolean contains(Graphics2D g2, double x, double y){
			return rect.contains(x, y);
		}
		
		@Override
		public void draw(Graphics2D g2){
			g2.drawImage(image, (int)rect.getMinX(), (int)rect.getMinY(), (int)rect.getMaxX(), (int)rect.getMaxY(),
					0, 0, image.getWidth(null), image.getHeight(null), null);
			
		}
		@Override
		public Rectangle2D getBounds(Graphics2D g2){
			return rect.getBounds2D();
		}
		
	}
	
	class DrawingRect implements DrawingShape{
		private Rectangle2D rect;
		private Color visibleColor = new Color(105, 185, 251, 125);

		public DrawingRect(Rectangle2D rect){
			this.rect = rect;

		}
		
		
		@Override
		public boolean contains(Graphics2D g2, double x, double y) {
			return rect.contains(x, y);
		}

		@Override
		public void draw(Graphics2D g2) {
			g2.setColor(visibleColor);
			g2.fill(rect);
			
		}
		

		@Override
		public Rectangle2D getBounds(Graphics2D g2) {
			return rect.getBounds2D();
		}
		
	}
	
	@Override
	public void batchActionPerformed(BatchActions ba) {
		//Loads the image from the server if the image has changed
		if(ba == BatchActions.IMAGECHANGED){
			this.imagePath = bchS.getImagePath();
			this.originalImage = loadImage(imagePath);
			processImages();
			remakeShapes();
		}
		
		else if(ba == BatchActions.SELECTEDCOLCHANGED){
			if(imgS.getImageIsHighlighted()){
				processRect();
			}
		}
		
		else if(ba == BatchActions.SELECTEDROWCHANGED){
			processRect();
		}
	}
	
	private void processRect(){
		int minY = (bchS.getProject().getRecordHeight() * bchS.getSelectedCellRow()) +
				bchS.getProject().getFirstYCoord();
		int maxY = bchS.getProject().getRecordHeight() + minY - 1;
		int minX = bchS.getField(bchS.getSelectedCellCol()).getXCoord();
		int maxX = bchS.getField(bchS.getSelectedCellCol()).getWidth() + minX - 1;
		rect = new DrawingRect(new Rectangle2D.Double(minX, minY, maxX - minX, maxY - minY));
		remakeShapes();
	}

	@Override
	public void batchActionPerformed(BatchActions ba, int row, int col) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void invertedToggled(boolean invertSetting) {
		if(invertSetting == true){
			image = invertedImage;
		}
		else{
			image = originalImage;
		}
		remakeShapes();
		
	}

	@Override
	public void imageZoomChanged(double zoom) {
		repaint();
		
	}

	@Override
	public void highlightsVisibleToggled(boolean highlightSetting) {
		processRect();
	}

	@Override
	public void imageCoordsChanged(int x, int y) {
		// TODO Auto-generated method stub
	}
}
