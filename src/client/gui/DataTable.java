package client.gui;

import java.awt.Color;
import java.awt.Component;
import java.io.IOException;
import java.io.Serializable;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.border.Border;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

import client.gui.quality.Checker;
import client.gui.synchronization.BatchState;
import client.gui.synchronization.BatchStateListener;



public class DataTable extends JTable implements BatchStateListener, Serializable {

	/**
	 * Automatically Generated by Eclipse
	 */
	private static final long serialVersionUID = -9075334855451490406L;
	//Global variables
	BatchState bchS;
	Checker[] checkers;
	

	
	
	
	public DataTable(BatchState bchS){
		this.bchS = bchS;
		bchS.addListener(this);
		this.setCellSelectionEnabled(true);
		this.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		this.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		
		
	}
	
	public boolean getIsKnownWord(String str, int col){
		if(col < 1 || str.length() == 0)
			return true;
		Checker check = checkers[col - 1];
		if(check == null){
			return true;
		}
		return check.existsInDict(str);
	}
	
	


	@Override
	public void batchActionPerformed(BatchActions ba) {
		if(ba == BatchActions.BATCHDOWNLOADED){
			DataTableModel currModel = new DataTableModel(bchS);
			this.setModel(currModel);
			checkers = new Checker[currModel.getColumnCount() - 1];
			for(int i = 0; i < currModel.getColumnCount() - 1; i ++){
				checkers[i] = null;
			}
			
			//set size and renderer
			for(int i = 0; i < currModel.getColumnCount(); ++i){
				TableColumn column = columnModel.getColumn(i);
				column.setPreferredWidth(150);
				column.setCellRenderer(new DataCellRenderer());
				//set known data
				if(i > 0){
					String kDataPath = bchS.getField(i-1).getKnownData();
					String kDataURL = "http://" + bchS.getServer_host() + ":" + bchS.getServer_port() +"/"
							+ kDataPath;
					if(kDataPath.length() > 0){
						Checker check = new Checker();
						
						try{
							URL kDataFormedURL = new URL(kDataURL);
							check.useDictionary(kDataFormedURL);
						}
						catch(IOException e){
							System.out.println("Could not open the knownData URL\n"+e.getMessage());
							e.printStackTrace();
						}
						checkers[i-1] = check;
					}
				}
			}
		}
		else if(ba == BatchActions.SELECTEDCOLCHANGED || ba == BatchActions.SELECTEDROWCHANGED){
			this.changeSelection(bchS.getSelectedCellRow(), bchS.getSelectedCellCol() + 1, false, false);
		}
		
		
	}

	@Override
	public void batchActionPerformed(BatchActions ba, int row, int col) {
	}

}

@SuppressWarnings("serial")
class DataCellRenderer extends JLabel implements TableCellRenderer {
	private Border unselectedBorder = BorderFactory.createLineBorder(Color.BLACK, 0);
	private Border selectedBorder = BorderFactory.createLineBorder(Color.BLUE, 2);
	private Color selectedBackground = new Color(105, 185, 251);

	public DataCellRenderer() {
		setOpaque(true);
	}

	public Component getTableCellRendererComponent(JTable table,
			Object value, boolean isSelected, boolean hasFocus, int row,
			int column) {
		
		String c = value.toString();
		boolean isKnownValue;
		isKnownValue = ((DataTable)table).getIsKnownWord(c, column);
		if(!isKnownValue)
			setBackground(Color.red);
		setBorder(unselectedBorder);
		
		if (table.isCellSelected(row, column)){
			setBorder(selectedBorder);
			if(isKnownValue){
				setBackground(selectedBackground);
			}
		}
		else if(isKnownValue){
			setBackground(Color.white);
			
		}
		this.setText(c);
		
		
		return this;
	}

}

class DataTableModel extends AbstractTableModel{
	
	BatchState bchS;
	int columns;
	int rows;

	/**
	 * Automatically generated by eclipse
	 */
	private static final long serialVersionUID = 1L;
	
	public DataTableModel(BatchState bchS){
		this.bchS = bchS;		
	}

	@Override
	public int getColumnCount() {
		return bchS.getFields().size() + 1;
	}

	@Override
	public int getRowCount() {
		return bchS.getProject().getRecordsPerImage();
	}

	@Override
	public Object getValueAt(int arg0, int arg1) {	
		if(arg1 == 0){
			return arg0+1;
		}
		return bchS.getValues()[arg0][arg1-1].getDataValue();
	}
	
	@Override
	public boolean isCellEditable(int row, int column){
		if(column == 0)
			return false;
		else
			return true;
	}
	
	@Override
	public void setValueAt(Object value, int row, int col){
		bchS.setValueAt((String) value, row, col-1);
	}
	
	@Override
	public String getColumnName(int col){
		if(col == 0){
			return "Record Number";
		}
		return bchS.getField(col-1).getFieldName();
	}
	
	
	
}
