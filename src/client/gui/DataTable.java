package client.gui;

import java.awt.Color;
import java.awt.Component;
import java.io.Serializable;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.border.Border;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;

import client.gui.synchronization.BatchState;
import client.gui.synchronization.BatchStateListener;



public class DataTable extends JTable implements BatchStateListener, Serializable {

	/**
	 * Automatically Generated by Eclipse
	 */
	private static final long serialVersionUID = -9075334855451490406L;
	//Global variables
	BatchState bchS;
	

	
	
	
	public DataTable(BatchState bchS){
		this.bchS = bchS;
		bchS.addListener(this);
	}
	
	




	@Override
	public void batchActionPerformed(BatchActions ba) {
		if(ba == BatchActions.BATCHDOWNLOADED){
			DataTableModel currModel = new DataTableModel(bchS);
			this.setModel(currModel);
		}
		else if(ba == BatchActions.SELECTEDCOLCHANGED || ba == BatchActions.SELECTEDROWCHANGED){
			this.changeSelection(bchS.getSelectedCellRow(), bchS.getSelectedCellCol() + 1, false, false);
		}
		
		
	}



	@Override
	public void batchActionPerformed(BatchActions ba, int row, int col) {
		// TODO Auto-generated method stub
	}

}

@SuppressWarnings("serial")
class DataCellRenderer extends JLabel implements TableCellRenderer {

	private Border unselectedBorder = BorderFactory.createLineBorder(Color.BLACK, 1);
	private Border selectedBorder = BorderFactory.createLineBorder(Color.BLUE, 2);
	private Color selectedBackground = new Color(105, 185, 251);

	public DataCellRenderer() {
		
		setOpaque(true);
		setFont(getFont().deriveFont(16.0f));
	}

	public Component getTableCellRendererComponent(JTable table,
			Object value, boolean isSelected, boolean hasFocus, int row,
			int column) {
		
		if (isSelected) {
			this.setBorder(selectedBorder);
			this.setBackground(selectedBackground);
		}
		else {
			this.setBorder(unselectedBorder);
			this.setBackground(Color.white);
		}
		
		this.setText((String)value);
		
		return this;
	}

}

class DataTableModel extends AbstractTableModel{
	
	BatchState bchS;
	int columns;
	int rows;

	/**
	 * Automatically generated by eclipse
	 */
	private static final long serialVersionUID = 1L;
	
	public DataTableModel(BatchState bchS){
		this.bchS = bchS;		
	}

	@Override
	public int getColumnCount() {
		return bchS.getFields().size() + 1;
	}

	@Override
	public int getRowCount() {
		return bchS.getProject().getRecordsPerImage();
	}

	@Override
	public Object getValueAt(int arg0, int arg1) {	
		if(arg1 == 0){
			return arg0+1;
		}
		return bchS.getValues()[arg0][arg1-1].getDataValue();
	}
	
	@Override
	public boolean isCellEditable(int row, int column){
		if(column == 0)
			return false;
		else
			return true;
	}
	
	@Override
	public void setValueAt(Object value, int row, int col){
		bchS.setValueAt((String) value, row, col-1);
	}
	
	@Override
	public String getColumnName(int col){
		if(col == 0){
			return "Record Number";
		}
		return bchS.getField(col-1).getFieldName();
	}
	
	
	
}
