/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package client.searchgui;

import java.awt.BorderLayout;
import java.awt.Image;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.AbstractListModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.ListModel;
import shared.communication.Search_Result;
import shared.model.Field;
import shared.model.Project;

/**
 *
 * @author pbridd
 */
public class SearchUI extends javax.swing.JFrame {

    private String username;
    private String password;
    private int port;
    private List<Project> projects;
    private List<Field> fields;
    /**
     * Creates new form SearchUI
     */
    public SearchUI() {
        initComponents();
        username = "";
        password = "";
        port = -1;
        projects = null;
        fields = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        portLabel = new javax.swing.JLabel();
        portText = new javax.swing.JTextField();
        projectLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fieldList = new javax.swing.JList(new DefaultListModel());
        fieldAdd = new javax.swing.JButton();
        fieldRemove = new javax.swing.JButton();
        searchTermLabel = new javax.swing.JLabel();
        searchTermText = new javax.swing.JTextField();
        searchTermAdd = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        searchTermList = new javax.swing.JList(new DefaultListModel());
        searchTermRemove = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        resultsTextField = new javax.swing.JTextArea();
        resultsLabel = new javax.swing.JLabel();
        searchSubmitButton = new javax.swing.JButton();
        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        usernameText = new javax.swing.JTextField();
        passwordText = new javax.swing.JPasswordField();
        credentialsSubmit = new javax.swing.JButton();
        projectComboBox = new javax.swing.JComboBox(new DefaultComboBoxModel());
        fieldComboBox = new javax.swing.JComboBox(new DefaultComboBoxModel());
        imageComboBox = new javax.swing.JComboBox(new DefaultComboBoxModel());
        imageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        portLabel.setText("Port:");

        portText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portTextActionPerformed(evt);
            }
        });

        projectLabel.setText("Project:");

        jLabel3.setText("Field:");

        jScrollPane1.setViewportView(fieldList);

        fieldAdd.setText("Add");
        fieldAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldAddActionPerformed(evt);
            }
        });

        fieldRemove.setText("Remove");
        fieldRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldRemoveActionPerformed(evt);
            }
        });

        searchTermLabel.setText("Search Term:");

        searchTermAdd.setText("Add");
        searchTermAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTermAddActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(searchTermList);

        searchTermRemove.setText("Remove");
        searchTermRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTermRemoveActionPerformed(evt);
            }
        });

        resultsTextField.setColumns(20);
        resultsTextField.setRows(5);
        jScrollPane3.setViewportView(resultsTextField);

        resultsLabel.setText("Results Console:");

        searchSubmitButton.setText("Search");
        searchSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchSubmitButtonActionPerformed(evt);
            }
        });

        usernameLabel.setText("Username:");

        passwordLabel.setText("Password:");

        usernameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTextActionPerformed(evt);
            }
        });

        credentialsSubmit.setText("Submit");
        credentialsSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                credentialsSubmitActionPerformed(evt);
            }
        });

        projectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectComboBoxActionPerformed(evt);
            }
        });

        imageComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageComboBoxActionPerformed(evt);
            }
        });

        imageLabel.setText("Images:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(resultsLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(usernameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(usernameText, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(projectComboBox, 0, 169, Short.MAX_VALUE)
                                    .addComponent(fieldComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(passwordLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(passwordText))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(fieldAdd)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(fieldRemove))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(imageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imageComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(searchSubmitButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchTermRemove))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectLabel)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(searchTermLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchTermText, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchTermAdd))
                            .addComponent(credentialsSubmit)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addComponent(portText, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(portLabel))
                        .addGap(0, 106, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(usernameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(usernameLabel))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(passwordLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portLabel)
                    .addComponent(portText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(credentialsSubmit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectLabel)
                    .addComponent(projectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fieldAdd)
                    .addComponent(fieldComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldRemove)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTermLabel)
                    .addComponent(searchTermText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTermAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchTermRemove)
                .addGap(3, 3, 3)
                .addComponent(searchSubmitButton)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imageLabel))
                .addGap(18, 18, 18)
                .addComponent(resultsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void portTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portTextActionPerformed

    private void fieldAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldAddActionPerformed
        DefaultListModel model1 = (DefaultListModel)fieldList.getModel();
        String text1 = String.valueOf(fieldComboBox.getSelectedItem());
        model1.addElement(text1);
        
        
    }//GEN-LAST:event_fieldAddActionPerformed

    private void fieldRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldRemoveActionPerformed
        DefaultListModel model1 = (DefaultListModel)fieldList.getModel();
        int selectedIndex = fieldList.getSelectedIndex();
        if(selectedIndex != -1){
            model1.remove(selectedIndex);
        }
    }//GEN-LAST:event_fieldRemoveActionPerformed

    private void searchSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchSubmitButtonActionPerformed
        imageComboBox.setModel(new DefaultComboBoxModel());
        DefaultComboBoxModel imgModel = (DefaultComboBoxModel)imageComboBox.getModel();
        
        //get search terms
        List<String> strings = new ArrayList<String>();
        DefaultListModel searchTermModel = (DefaultListModel)searchTermList.getModel();
        int sTModelSize = searchTermModel.getSize();
        for(int i = 0; i < sTModelSize; i++){
            strings.add((String)searchTermModel.get(i));
        }
        
        List<Integer> searchFields = new ArrayList<Integer>();
        
        DefaultListModel searchFieldModel = (DefaultListModel)fieldList.getModel();
        int fModelSize = searchFieldModel.getSize();
        for(int i = 0; i < fModelSize; i++){
            String tempFString = (String) searchFieldModel.get(i);
            boolean foundField = false;
            for(Field f: fields){
                if(f.getFieldName().equals(tempFString)){
                    searchFields.add(f.getFieldID());
                    foundField = true;
                }
            }
            //make sure we found the field
            if(!foundField){
                resultsTextField.setText("Could not find the field named " + tempFString);
                return;
            }
        }
        
        Search_Result result = SearchUIIntegration.search(username, password,
                searchFields , strings, "localhost", port);
        if(result == null){
            resultsTextField.setText("There was an error while trying to retrieve"
                    + " search results from the server");
            return;
        }
        
        List<Integer> batchIDs = result.getBatchIDs();
        List<String> imageURLs = result.getImageURLs();
        List<Integer> recordNumbers = result.getRecordNumbers();
        List<Integer> fieldIDs = result.getFieldIDs();

        StringBuilder build = new StringBuilder();
        //add an empty element first so it doesn't open up a new window after loading
		imgModel.addElement("");
        for(int i = 0; i < batchIDs.size(); i++){
                build.append(batchIDs.get(i) + "\n");
                String tempURL = "http://localhost" + ":" + port + "/" 
                                + imageURLs.get(i)+ "\n";
                build.append(tempURL);
                if(imgModel.getIndexOf(tempURL) == -1)
                    imgModel.addElement(tempURL);
                
                build.append(recordNumbers.get(i) + "\n");
                build.append(fieldIDs.get(i) + "\n");
        }

        resultsTextField.setText(build.toString());
        
    }//GEN-LAST:event_searchSubmitButtonActionPerformed

    private void usernameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameTextActionPerformed

    private void searchTermAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTermAddActionPerformed
        DefaultListModel model1 = (DefaultListModel)searchTermList.getModel();
        String text1 = searchTermText.getText();
        model1.addElement(text1);
    }//GEN-LAST:event_searchTermAddActionPerformed

    private void searchTermRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTermRemoveActionPerformed
        DefaultListModel model1 = (DefaultListModel)searchTermList.getModel();
        int selectedIndex = searchTermList.getSelectedIndex();
        if(selectedIndex != -1){
            model1.remove(selectedIndex);
        }
    }//GEN-LAST:event_searchTermRemoveActionPerformed

    private void credentialsSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_credentialsSubmitActionPerformed
        username = usernameText.getText();
        password = new String(passwordText.getPassword());
        String portStr = portText.getText();
        projectComboBox.setModel(new DefaultComboBoxModel());
        try{
            port = Integer.parseInt(portStr);
            resultsTextField.setText("");
        }
        catch(NumberFormatException e){
            resultsTextField.setText("The port number was invalid.");
            return;
        }
        
        //make sure the credentials are valid
        boolean authenticated = SearchUIIntegration.validateUser(username,
                password, "localhost", port);
        if(authenticated == false){
            resultsTextField.setText("The user could not be authenticated!");
            return;
        }
        
        projects = SearchUIIntegration.getProjects(username, password,
                "localhost", port);
       

        if(projects != null){
            DefaultComboBoxModel model =(DefaultComboBoxModel) projectComboBox.getModel();
            for(Project p : projects){
                model.addElement(p.getProjectTitle());
            }
        }
        else{
            resultsTextField.setText("The projects could not be fetched from the server!");
            return;
        }
        resultsTextField.setText("Authentication successful!");
    }//GEN-LAST:event_credentialsSubmitActionPerformed

    private void projectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectComboBoxActionPerformed
        fieldComboBox.setModel(new DefaultComboBoxModel());
        
        if(projects == null){
            resultsTextField.setText("Error: there were no projects found");
        }
        
        //find the needed project from the project list
        String selectedProject = (String) projectComboBox.getSelectedItem();
        Project foundProject = null;
        for(Project p : projects){
            if(p.getProjectTitle().equals(selectedProject))
                foundProject = p;
        }
        
        //double check that a project was found
        if(foundProject == null){
            resultsTextField.setText("Error: No project was found that matches the "
                    + "selection");
            return;
        }
        
        fields = SearchUIIntegration.getFields(username, password, foundProject.getProjectID(), 
                "localhost", port);
        if(fields != null){
            DefaultComboBoxModel model =(DefaultComboBoxModel) fieldComboBox.getModel();
            for(Field f : fields){
                model.addElement(f.getFieldName());
            }
        }
        else{
            resultsTextField.setText("The projects could not be fetched from the server!");
        }
        
    }//GEN-LAST:event_projectComboBoxActionPerformed

    private void imageComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageComboBoxActionPerformed
        String selectedURL = (String) imageComboBox.getSelectedItem();
        //do nothing if it's an empty string
        if(selectedURL.length() == 0){
            return;
        }
        ImageFrame img = new ImageFrame(selectedURL);
        img.setVisible(true);
    }//GEN-LAST:event_imageComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton credentialsSubmit;
    private javax.swing.JButton fieldAdd;
    private javax.swing.JComboBox fieldComboBox;
    private javax.swing.JList fieldList;
    private javax.swing.JButton fieldRemove;
    private javax.swing.JComboBox imageComboBox;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordText;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portText;
    private javax.swing.JComboBox projectComboBox;
    private javax.swing.JLabel projectLabel;
    private javax.swing.JLabel resultsLabel;
    private javax.swing.JTextArea resultsTextField;
    private javax.swing.JButton searchSubmitButton;
    private javax.swing.JButton searchTermAdd;
    private javax.swing.JLabel searchTermLabel;
    private javax.swing.JList searchTermList;
    private javax.swing.JButton searchTermRemove;
    private javax.swing.JTextField searchTermText;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameText;
    // End of variables declaration//GEN-END:variables
}

class ImageFrame extends JFrame{
    private Image image;
    public ImageFrame(){
        image = null;   
    }
    public ImageFrame(String imgURL){
        try{
            URL url = new URL(imgURL);
            image = ImageIO.read(url);
        }
        catch(IOException e){
            System.out.println("Something bad just happened when trying to read the image"
                    + " URL!");
        }
        JPanel mainPanel = new JPanel(new BorderLayout());
        JLabel lbImage = new JLabel(new ImageIcon(image));
        mainPanel.add(lbImage, BorderLayout.CENTER);
        this.add(mainPanel);
        pack();
    }
}
